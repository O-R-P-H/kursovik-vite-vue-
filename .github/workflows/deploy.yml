name: Backend Deployment

on:
  push:
    branches: [backend]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Login to Harbor
        uses: docker/login-action@v3
        with:
          registry: harbor.tsukawa.ru
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Build and push Docker image
        run: |
          # Проверяем наличие ключевых файлов перед сборкой
          ls -la
          [ -f tsconfig.json ] || (echo "Error: tsconfig.json not found!" && exit 1)
          [ -f package.json ] || (echo "Error: package.json not found!" && exit 1)

          # Собираем образ с полной очисткой кэша
          docker build \
            --no-cache \
            -t harbor.tsukawa.ru/backseezer/backend:latest \
            -t harbor.tsukawa.ru/backseezer/backend:${{ github.sha }} \
            .

          # Проверяем содержимое образа
          docker run --rm harbor.tsukawa.ru/backseezer/backend:latest ls -la /app
          docker run --rm harbor.tsukawa.ru/backseezer/backend:latest ls -la /app/dist

          # Пушим образ
          docker push harbor.tsukawa.ru/backseezer/backend:latest
          docker push harbor.tsukawa.ru/backseezer/backend:${{ github.sha }}

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            set -e
            
            # Создаем рабочую директорию
            mkdir -p ~/backend_seezer
            cd ~/backend_seezer
            
            # Скачиваем актуальный docker-compose.yml
            curl -fsSL "https://raw.githubusercontent.com/O-R-P-H/kursovik-vite-vue/backend/docker-compose.yml" -o docker-compose.yml
            
            # Логинимся в Harbor
            echo "${{ secrets.HARBOR_PASSWORD }}" | docker login harbor.tsukawa.ru -u ${{ secrets.HARBOR_USERNAME }} --password-stdin
            
            # Останавливаем и удаляем старый контейнер
            docker compose down -v || true
            
            # Удаляем старый образ
            docker rmi harbor.tsukawa.ru/backseezer/backend:latest || true
            
            # Получаем свежий образ
            docker pull harbor.tsukawa.ru/backseezer/backend:latest
            
            # Проверяем содержимое образа
            docker create --name temp_check harbor.tsukawa.ru/backseezer/backend:latest
            docker cp temp_check:/app/tsconfig.json ./tsconfig-check.json || echo "Warning: tsconfig.json check failed"
            docker cp temp_check:/app/dist/main.js ./main-check.js || echo "Warning: main.js check failed"
            docker rm temp_check
            
            # Запускаем новый контейнер
            docker compose up -d --force-recreate
            
            # Даем время на запуск
            sleep 15
            
            # Проверяем состояние
            docker ps -a --filter "name=main" --format "table {{.ID}}\t{{.Names}}\t{{.Status}}\t{{.Ports}}"
            
            # Проверяем логи
            docker compose logs --tail=50 main
            
            # Проверяем здоровье приложения
            curl -s http://localhost:3000/api/health || echo "Health check failed"
